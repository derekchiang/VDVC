// Generated by CoffeeScript 1.6.2
(function() {
  var assert, vdvc;

  vdvc = require('../vdvc');

  assert = require('assert');

  describe('VDVC', function() {
    var manager, obj;

    manager = null;
    obj = null;
    beforeEach(function() {
      manager = vdvc["new"]();
      return obj = {
        name: 'derek',
        age: '20',
        speak: function() {
          return console.log('Hello Everybody!');
        }
      };
    });
    describe('#clone()', function() {
      it('should return a deeply-equal object', function() {
        return assert.deepEqual(obj, manager.clone(obj));
      });
      return it('should work for array', function() {
        var arr;

        arr = [1, 'haha', obj];
        return assert.deepEqual(arr, manager.clone(arr));
      });
    });
    describe('#add() and #commit()', function() {
      it('should not throw errors', function() {
        return assert.doesNotThrow(function() {
          manager.add(obj);
          return manager.commit();
        });
      });
      return it('should work with multiple objects', function() {
        return assert.doesNotThrow(function() {
          var anotherObj;

          anotherObj = {
            name: 'bob',
            age: 40,
            speak: function() {
              return console.log('zzz...');
            }
          };
          manager.add(obj, anotherObj);
          return manager.commit();
        });
      });
    });
    return describe('#prev()', function() {
      return it('should return the previous version of the object', function() {
        var oldObj, prevObj;

        oldObj = manager.clone(obj);
        manager.add(obj);
        manager.commit();
        obj.age = 30;
        manager.add(obj);
        manager.commit();
        prevObj = manager.prev(obj);
        manager.makeClean(prevObj);
        return assert.deepEqual(oldObj, prevObj);
      });
    });
  });

}).call(this);
