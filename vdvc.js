// Generated by CoffeeScript 1.6.2
(function() {
  var Manager, jquery,
    __slice = [].slice;

  jquery = require('jquery');

  Manager = (function() {
    function Manager() {
      var buffer, getObjectArr, next_id, objectId, store;

      next_id = 0;
      buffer = {};
      store = {};
      getObjectArr = function(obj) {
        return store[objectId(obj)];
      };
      objectId = function(obj) {
        if (obj == null) {
          return null;
        } else {
          if (obj.__id == null) {
            obj.__id = this.next_id++;
          }
          return obj.__id;
        }
      };
      this.clone = function(obj) {
        return jquery.extend(true, {}, obj);
      };
      this.add = function() {
        var obj, objects, _i, _len, _results;

        objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          obj = objects[_i];
          _results.push(buffer[objectId(obj)] = this.clone(obj));
        }
        return _results;
      };
      this.commit = function() {
        var key, value;

        for (key in buffer) {
          value = buffer[key];
          if (store[key] != null) {
            store[key].push(value);
          } else {
            store[key] = [value];
          }
          value.commitId = store[key].length - 1;
        }
        return console.log(store);
      };
      this.prev = function(obj) {
        var objectArr;

        objectArr = getObjectArr(obj);
        if (objectArr) {
          if (obj.commitId != null) {
            if (obj.commitId === 0) {
              throw "It's already the earliest version";
            } else {
              return objectArr[obj.commitId - 1];
            }
          } else {
            return objectArr[objectArr.length - 2];
          }
        } else {
          throw "Object not versioned";
        }
      };
      this.next = function(obj) {
        var objectArr;

        objectArr = getObjectArr(obj);
        if (objectArr) {
          if ((obj.commitId == null) || obj.commitId === objectArr.length - 1) {
            throw "It's already the latest version";
          } else {
            return objectArr[obj.commitId + 1];
          }
        } else {
          throw "Object not versioned";
        }
      };
      this.reset = function(obj, commitId) {
        var objectArr;

        objectArr = getObjectArr(obj);
        if ((0 <= commitId && commitId < objectArr.length)) {
          return objectArr[commitId];
        } else {
          throw "Invalid commit id";
        }
      };
    }

    return Manager;

  })();

  module.exports["new"] = function() {
    return new Manager;
  };

}).call(this);
